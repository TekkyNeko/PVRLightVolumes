%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 1385515857, guid: 5f20141248a4dc040a0060f5893b9b74, type: 3}
  m_Name: VRCLightVolumes.LightVolumeManager
  m_EditorClassIdentifier: 
  source: "using UnityEngine;\r\nusing System;\r\n\r\n#if UDONSHARP\r\nusing VRC.SDKBase;\r\nusing
    UdonSharp;\r\n#elif PVR_CCK_WORLDS\r\nusing PVR.PSharp;\r\n#endif\r\n\r\n#if
    !UDONSHARP\r\nusing VRCShader = UnityEngine.Shader;\r\n#endif\r\n\r\nnamespace
    VRCLightVolumes {\r\n#if UDONSHARP\r\n    [UdonBehaviourSyncMode(BehaviourSyncMode.None)]\r\n   
    public class LightVolumeManager : UdonSharpBehaviour\r\n#elif PVR_CCK_WORLDS\r\n   
    public class LightVolumeManager : PSharpBehaviour\r\n#else\r\n    public class
    LightVolumeManager : MonoBehaviour\r\n#endif\r\n    {\r\n\r\n        [Tooltip(\"Combined
    Texture3D containing all Light Volumes' textures.\")]\r\n        public Texture3D
    LightVolumeAtlas;\r\n        [Tooltip(\"When enabled, areas outside Light Volumes
    fall back to light probes. Otherwise, the Light Volume with the smallest weight
    is used as fallback. It also improves performance.\")]\r\n        public bool
    LightProbesBlending = true;\r\n        [Tooltip(\"Disables smooth blending with
    areas outside Light Volumes. Use it if your entire scene's play area is covered
    by Light Volumes. It also improves performance.\")]\r\n        public bool SharpBounds
    = true;\r\n        [Tooltip(\"Automatically updates any volumes data in runtime:
    Enabling/Disabling, Color, Edge Smoothing, all the global settings and more.
    Position, Rotation and Scale gets updated only for volumes that are marked dynamic.\")]\r\n       
    public bool AutoUpdateVolumes = false;\r\n        [Tooltip(\"Limits the maximum
    number of additive volumes that can affect a single pixel. If you have many dynamic
    additive volumes that may overlap, it's good practice to limit overdraw to maintain
    performance.\")]\r\n        public int AdditiveMaxOverdraw = 4;\r\n        [Tooltip(\"All
    Light Volume instances sorted in decreasing order by weight. You can enable or
    disable volumes game objects at runtime. Manually disabling unnecessary volumes
    improves performance.\")]\r\n        public LightVolumeInstance[] LightVolumeInstances
    = new LightVolumeInstance[0];\r\n\r\n        private bool _isInitialized = false;\r\n\r\n       
    // Actually enabled Volumes\r\n        private int _enabledCount = 0;\r\n       
    private int[] _enabledIDs = new int[32];\r\n        private Vector4[] _invLocalEdgeSmooth
    = new Vector4[0];\r\n        private Matrix4x4[] _invWorldMatrix = new Matrix4x4[0];\r\n       
    private Vector4[] _boundsUvw = new Vector4[0];\r\n        private Vector4[] _relativeRotations
    = new Vector4[0];\r\n        private Vector4[] _colors = new Vector4[0];\r\n       
    private int _additiveCount = 0;\r\n        private Vector4[] _bounds = new Vector4[6];\r\n\r\n       
    private int lightVolumeInvLocalEdgeSmoothID;\r\n        private int lightVolumeInvWorldMatrixID;\r\n       
    private int lightVolumeUvwID;\r\n        private int lightVolumeColorID;\r\n       
    private int lightVolumeRotationID;\r\n        private int lightVolumeCountID;\r\n       
    private int lightVolumeAdditiveCountID;\r\n        private int lightVolumeAdditiveMaxOverdrawID;\r\n       
    private int lightVolumeEnabledID;\r\n        private int lightVolumeProbesBlendID;\r\n       
    private int lightVolumeSharpBoundsID;\r\n        private int lightVolumeID;\r\n\r\n       
    // Initializing gloabal shader arrays if needed \r\n        private void TryInitialize()
    {\r\n\r\n#if !UNITY_EDITOR\r\n            if (_isInitialized) return;\r\n#endif\r\n\r\n           
    lightVolumeInvLocalEdgeSmoothID = VRCShader.PropertyToID(\"_UdonLightVolumeInvLocalEdgeSmooth\");\r\n           
    lightVolumeInvWorldMatrixID = VRCShader.PropertyToID(\"_UdonLightVolumeInvWorldMatrix\");\r\n           
    lightVolumeUvwID = VRCShader.PropertyToID(\"_UdonLightVolumeUvw\");\r\n           
    lightVolumeColorID = VRCShader.PropertyToID(\"_UdonLightVolumeColor\");\r\n           
    lightVolumeRotationID = VRCShader.PropertyToID(\"_UdonLightVolumeRotation\");\r\n           
    lightVolumeCountID = VRCShader.PropertyToID(\"_UdonLightVolumeCount\");\r\n           
    lightVolumeAdditiveCountID = VRCShader.PropertyToID(\"_UdonLightVolumeAdditiveCount\");\r\n           
    lightVolumeAdditiveMaxOverdrawID = VRCShader.PropertyToID(\"_UdonLightVolumeAdditiveMaxOverdraw\");\r\n           
    lightVolumeEnabledID = VRCShader.PropertyToID(\"_UdonLightVolumeEnabled\");\r\n           
    lightVolumeProbesBlendID = VRCShader.PropertyToID(\"_UdonLightVolumeProbesBlend\");\r\n           
    lightVolumeSharpBoundsID = VRCShader.PropertyToID(\"_UdonLightVolumeSharpBounds\");\r\n           
    lightVolumeID = VRCShader.PropertyToID(\"_UdonLightVolume\");\r\n\r\n#if UNITY_EDITOR\r\n           
    if (_isInitialized) return;\r\n#endif\r\n\r\n            VRCShader.SetGlobalVectorArray(lightVolumeInvLocalEdgeSmoothID,
    new Vector4[32]);\r\n            VRCShader.SetGlobalMatrixArray(lightVolumeInvWorldMatrixID,
    new Matrix4x4[32]);\r\n            VRCShader.SetGlobalVectorArray(lightVolumeRotationID,
    new Vector4[64]);\r\n            VRCShader.SetGlobalVectorArray(lightVolumeUvwID,
    new Vector4[192]);\r\n            VRCShader.SetGlobalVectorArray(lightVolumeColorID,
    new Vector4[32]);\r\n            _isInitialized = true;\r\n        }\r\n\r\n       
    private void Update() {\r\n            if (!AutoUpdateVolumes) return;\r\n           
    UpdateVolumes();\r\n        }\r\n\r\n        private void Start() {\r\n           
    _isInitialized = false;\r\n            UpdateVolumes();\r\n        }\r\n\r\n       
    public void UpdateVolumes() {\r\n\r\n            TryInitialize();\r\n\r\n           
    // Searching for enabled volumes. Counting Additive volumes.\r\n            _enabledCount
    = 0;\r\n            _additiveCount = 0;\r\n            int maxLength = Mathf.Min(LightVolumeInstances.Length,
    32);\r\n            for (int i = 0; i < maxLength; i++) {\r\n               
    LightVolumeInstance instance = LightVolumeInstances[i];\r\n                if
    (instance != null && instance.gameObject.activeInHierarchy) {\r\n#if UNITY_EDITOR\r\n                   
    instance.UpdateTransform();\r\n#else\r\n                    if (instance.IsDynamic)
    instance.UpdateTransform();\r\n#endif\r\n                    if (instance.IsAdditive)
    _additiveCount++;\r\n                    _enabledIDs[_enabledCount] = i;\r\n                   
    _enabledCount++;\r\n                }\r\n            }\r\n\r\n            //
    Initializing required arrays\r\n            _invLocalEdgeSmooth = new Vector4[_enabledCount];\r\n           
    _invWorldMatrix = new Matrix4x4[_enabledCount];\r\n            _colors = new
    Vector4[_enabledCount];\r\n            _relativeRotations = new Vector4[_enabledCount
    * 2];\r\n            _boundsUvw = new Vector4[_enabledCount * 6];\r\n\r\n           
    // Filling arrays with enabled volumes\r\n            for (int i = 0; i < _enabledCount;
    i++) {\r\n\r\n                int enabledId = _enabledIDs[i];\r\n               
    int i2 = i * 2;\r\n                int i6 = i * 6;\r\n\r\n                LightVolumeInstance
    instance = LightVolumeInstances[enabledId];\r\n\r\n                _invLocalEdgeSmooth[i]
    = instance.InvLocalEdgeSmoothing; // Setting volume edge smoothing\r\n               
    _invWorldMatrix[i] = instance.InvWorldMatrix; // Setting volume transform\r\n\r\n               
    Vector4 c = instance.Color; // Changing volume color\r\n                c.w =
    instance.IsRotated ? 1 : 0; // Color alpha stores if volume rotated or not\r\n               
    _colors[i] = c;\r\n\r\n                // Setting volume relative rotation as
    3x2 matrix\r\n                _relativeRotations[i2] = instance.RelativeRotationRow0;\r\n               
    _relativeRotations[i2 + 1] = instance.RelativeRotationRow1;\r\n\r\n               
    // Setting volume UVW bounds\r\n                _bounds[0] = instance.BoundsUvwMin0;\r\n               
    _bounds[1] = instance.BoundsUvwMax0;\r\n                _bounds[2] = instance.BoundsUvwMin1;\r\n               
    _bounds[3] = instance.BoundsUvwMax1;\r\n                _bounds[4] = instance.BoundsUvwMin2;\r\n               
    _bounds[5] = instance.BoundsUvwMax2;\r\n                Array.Copy(_bounds, 0,
    _boundsUvw, i6, 6);\r\n\r\n            }\r\n\r\n            // Disabling light
    volumes system if no atlas or no volumes\r\n            if (LightVolumeAtlas
    == null || _enabledCount == 0) {\r\n                VRCShader.SetGlobalFloat(lightVolumeEnabledID,
    0);\r\n                return;\r\n            }\r\n\r\n            // 3D texture
    and it's parameters\r\n            VRCShader.SetGlobalTexture(lightVolumeID,
    LightVolumeAtlas);\r\n\r\n            // Defines if Light Probes Blending enabled
    in scene\r\n            VRCShader.SetGlobalFloat(lightVolumeProbesBlendID, LightProbesBlending
    ? 1 : 0);\r\n            VRCShader.SetGlobalFloat(lightVolumeSharpBoundsID, SharpBounds
    ? 1 : 0);\r\n\r\n            // All light volumes Extra Data\r\n            VRCShader.SetGlobalVectorArray(lightVolumeInvLocalEdgeSmoothID,
    _invLocalEdgeSmooth);\r\n            VRCShader.SetGlobalMatrixArray(lightVolumeInvWorldMatrixID,
    _invWorldMatrix);\r\n\r\n            // All light volumes UVW\r\n           
    VRCShader.SetGlobalVectorArray(lightVolumeUvwID, _boundsUvw);\r\n\r\n           
    // All light volumes count\r\n            VRCShader.SetGlobalFloat(lightVolumeCountID,
    _enabledCount);\r\n            VRCShader.SetGlobalFloat(lightVolumeAdditiveCountID,
    _additiveCount);\r\n            VRCShader.SetGlobalFloat(lightVolumeAdditiveMaxOverdrawID,
    Mathf.Min(Mathf.Max(AdditiveMaxOverdraw, 0), _additiveCount));\r\n\r\n           
    // Defines if Light Volumes enabled in scene\r\n            VRCShader.SetGlobalFloat(lightVolumeEnabledID,
    1);\r\n\r\n            // Volume's relative rotation\r\n            VRCShader.SetGlobalVectorArray(lightVolumeRotationID,
    _relativeRotations);\r\n\r\n            // Volume's color correction\r\n           
    VRCShader.SetGlobalVectorArray(lightVolumeColorID, _colors);\r\n\r\n        }\r\n   
    }\r\n}"
  baseAsset: {fileID: 0}
