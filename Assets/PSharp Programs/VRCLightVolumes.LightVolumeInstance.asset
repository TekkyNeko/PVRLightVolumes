%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 1385515857, guid: 5f20141248a4dc040a0060f5893b9b74, type: 3}
  m_Name: VRCLightVolumes.LightVolumeInstance
  m_EditorClassIdentifier: 
  source: "using UnityEngine;\r\n#if UDONSHARP\r\nusing UdonSharp;\r\n#elif PVR_CCK_WORLDS\r\nusing
    PVR.PSharp;\r\n#endif\r\n\r\nnamespace VRCLightVolumes {\r\n#if UDONSHARP\r\n   
    [UdonBehaviourSyncMode(BehaviourSyncMode.None)]\r\n    public class LightVolumeInstance
    : UdonSharpBehaviour\r\n#elif PVR_CCK_WORLDS\r\n    public class LightVolumeInstance
    : PSharpBehaviour\r\n#else\r\n    public class LightVolumeInstance : MonoBehaviour\r\n#endif\r\n   
    {\r\n\r\n        [Tooltip(\"Changing the color is useful for animating Additive
    volumes. You can even control the R, G, B channels separately this way.\")]\r\n       
    [ColorUsage(showAlpha: false, hdr: true)]\r\n        public Color Color = Color.white;\r\n       
    [Tooltip(\"Defines whether this volume can be moved in runtime. Disabling this
    option slightly improves performance. You can even change it in runtime.\")]\r\n       
    public bool IsDynamic = false;\r\n        [Tooltip(\"Additive volumes apply their
    light on top of others as an overlay. Useful for movable lights like flashlights,
    projectors, disco balls, etc. They can also project light onto static lightmapped
    objects if the surface shader supports it.\")]\r\n        public bool IsAdditive
    = false;\r\n        [Tooltip(\"Inverse rotation of the pose the volume was baked
    in. Automatically recalculated for dynamic volumes with auto-update, or manually
    via the UpdateRotation() method.\")]\r\n        public Quaternion InvBakedRotation
    = Quaternion.identity;\r\n        [Space]\r\n        [Tooltip(\"Min bounds of
    Texture0 in 3D atlas space.\")]\r\n        public Vector4 BoundsUvwMin0 = new
    Vector4();\r\n        [Tooltip(\"Min bounds of Texture1 in 3D atlas space.\")]\r\n       
    public Vector4 BoundsUvwMin1 = new Vector4();\r\n        [Tooltip(\"Min bounds
    of Texture2 in 3D atlas space.\")]\r\n        public Vector4 BoundsUvwMin2 =
    new Vector4();\r\n        [Space]\r\n        [Tooltip(\"Max bounds of Texture0
    in 3D atlas space.\")]\r\n        public Vector4 BoundsUvwMax0 = new Vector4();\r\n       
    [Tooltip(\"Max bounds of Texture1 in 3D atlas space.\")]\r\n        public Vector4
    BoundsUvwMax1 = new Vector4();\r\n        [Tooltip(\"Max bounds of Texture2 in
    3D atlas space.\")]\r\n        public Vector4 BoundsUvwMax2 = new Vector4();\r\n       
    [Space]\r\n        [Tooltip(\"Inversed edge smoothing in 3D atlas space. Recalculates
    via SetSmoothBlending(float radius) method.\")]\r\n        public Vector4 InvLocalEdgeSmoothing
    = new Vector4();\r\n        [Tooltip(\"Inversed TRS matrix of this volume that
    transforms it into the 1x1x1 cube. Recalculates via the UpdateRotation() method.\")]\r\n       
    public Matrix4x4 InvWorldMatrix = Matrix4x4.identity;\r\n        [Tooltip(\"Current
    volume's rotation matrix row 0 relative to the rotation it was baked with. Mandatory
    for dynamic volumes. Recalculates via the UpdateRotation() method.\")]\r\n       
    public Vector3 RelativeRotationRow0 = Vector3.zero;\r\n        [Tooltip(\"Current
    volume's rotation matrix row 1 relative to the rotation it was baked with. Mandatory
    for dynamic volumes. Recalculates via the UpdateRotation() method.\")]\r\n       
    public Vector3 RelativeRotationRow1 = Vector3.zero;\r\n        [Tooltip(\"True
    if there is any relative rotation. No relative rotation improves performance.
    Recalculated via the UpdateRotation() method.\")]\r\n        public bool IsRotated
    = false;\r\n\r\n        // Calculates and sets invLocalEdgeBlending\r\n       
    public void SetSmoothBlending(float radius) {\r\n            Vector3 scl = transform.lossyScale;\r\n           
    InvLocalEdgeSmoothing = scl / Mathf.Max(radius, 0.00001f);\r\n        }\r\n\r\n       
    // Recalculates inv TRS matrix and Relative L1 rotation\r\n        public void
    UpdateTransform() {\r\n            Quaternion transformRot = transform.rotation;\r\n           
    InvWorldMatrix = Matrix4x4.TRS(transform.position, transformRot, transform.lossyScale).inverse;\r\n           
    Quaternion rot = transformRot * InvBakedRotation;\r\n            IsRotated =
    Quaternion.Dot(rot, Quaternion.identity) < 0.999999f;\r\n\r\n            Matrix4x4
    m = Matrix4x4.Rotate(rot);\r\n\r\n            Vector4 row0 = m.GetRow(0);\r\n           
    row0.w = 0;\r\n            RelativeRotationRow0 = row0;\r\n            Vector4
    row1 = m.GetRow(1);\r\n            row1.w = 0;\r\n            RelativeRotationRow1
    = row1;\r\n\r\n        }\r\n\r\n    }\r\n}"
  baseAsset: {fileID: 0}
